Plug 'preservim/nerdtree'
Plug 'tpope/vim-commentary'

let mapleader = ","

set clipboard+=unnamed
set clipboard+=unnamedplus
set clipboard+=ideaput
set ignorecase smartcase
set hlsearch
set showmode
set incsearch
set number 

set commentary
set surround
set highlightedyank
set easymotion
set ideajoin

" CORE
nmap <C-s> :w<CR>
imap <C-s> <Esc>:w<CR>
nmap <C-r><C-r> <Action>(RenameElement)
map ZQ <Action>(exit)
map ZZ <Action>(CloseContent)
map gi <Action>(GotoImplementation)
nmap gpi" vi""0p 
nmap gpi' vi'"0p 
nmap <space>qq ZQ
nmap <F2> :NERDTree<CR>

map <leader><space> :nohlsearch<CR>
nmap <leader>rn <Action>(RenameElement)
nmap <leader>f <Action>(ReformatCode)

" EASYMOTION
map s <Plug>(easymotion-s)

" Buffers
nmap <space><Tab> <Action>(GoToLastTab)
nmap <space>bf <Action>(ReformatCode)
map <space>bd <Action>(CloseEditor)
map <space>bX <Action>(CloseAllEditorsButActive)
map <space>bx <Action>(CloseAllEditors)
map <space>bh <Action>(SplitHorizontally)
map <space>bv <Action>(SplitVertically)
map <space>bw <Action>(ToggleReadOnlyAttribute)

map <leader>z <Action>(PreviousTab)
map <leader>x <Action>(NextTab)
map <leader>c <Action>(CloseEditor)
map <leader>b <Action>(Switcher)
map <leader>h <Action>(SplitHorizontally)
map <leader>v <Action>(SplitVertically)

" Actions
nmap <space>aa <Action>(ShowContextActions)
nmap <space>au <Action>($Undo)
nmap <space>ar <Action>($Redo)
nmap <space>ac <Action>($Copy)
nmap <space>ax <Action>($Cut)
nmap <space>av <Action>($Paste)
nmap <space>as <Action>($SelectAll)

" GIT
nmap <space>gs <Action>(ActivateCommitToolWindow)
nmap <space>gc <Action>(ActivateCommitToolWindow)
nmap <space>gb <Action>(Git.Branches)
nmap <space>ga <Action>(Git.Add)
nmap <space>gp <Action>(Vcs.Push)
nmap <space>gP <Action>(Git.Pull)
nmap <space>gf <Action>(Git.Fetch)
nmap <space>gd <Action>(Git.CompareWithBranch )
nmap <space>gS <Action>(Git.Stage.Add)
nmap <space>gU <Action>(Git.Stage.Revert)
nmap <space>gv <Action>(Vcs.ShowTabbedFileHistory)
nmap <space>gV <Action>(Git.Log)

" Search
nmap <space>ss <Action>(GotoSymbol)
nmap <space>sa <Action>(GotoAction)
nmap <space>sf <Action>(GotoFile)
nmap <space>sh <Action>(RecentFiles)
nmap <space>sH <Action>(RecentLocations)
nmap <space>sc <Action>(GotoClass)
nmap <space>sb <Action>(Switcher)
nmap <space>s. <Action>(SearchEverywhere)
nmap <space>s/ <Action>(TextSearchAction)
nmap <space>so <Action>(FileStructurePopup)

map <C-p> <Esc><Action>(GotoFile)

" View
nmap <space>ve <Action>(ActivateErrorsInSolutionToolWindow)
nmap <space>vp <Action>(ActivateProjectToolWindow)
nmap <space>vo <Action>(ActivateStructureToolWindow)
nmap <space>vt <Action>(ActivateUnitTestsToolWindow)
nmap <space>vT <Action>(ActivateUnitTestsCoverageToolWindow)
nmap <space>vc <Action>(ActivateTerminalToolWindow)

" Development
nmap <space>d. <Action>(ToggleLineBreakpoint)
nmap <space>db <Action>(BuildSolutionAction)
nmap <space>dB <Action>(RebuildSolutionAction)
nmap <space>du <Action>(FindUsages)
nmap <space>di <Action>(GotoImplementation)
nmap <space>dl <Action>(GotoTypeDeclaration)
nmap <space>dr <Action>(RenameElement)
nmap <space>dR <Action>(Refactorings.QuickListPopupAction)
nmap <space>dd <Action>(GotoDeclaration)
nmap <space>dd <Action>(GotoDeclaration)
nmap <space>dx <Action>(ChooseRunConfiguration)
nmap <space>dX <Action>(ChooseDebugConfiguration)

" Test
if &ide =~? 'intellij idea'
    "IntelliJ IDEA commands

elseif &ide =~? 'rider'
    "Rider commands
    nmap <space>t. <Action>(RiderUnitTestQuickListPopupAction)
    nmap <space>tt <Action>(RiderUnitTestRunSolutionAction)
    nmap <space>td <Action>(RiderUnitTestDebugContextAction)
    nmap <space>tr <Action>(RiderUnitTestRepeatPreviousRunAction)
endif

nmap ]d <Action>(GotoNextError)
nmap [d <Action>(GotoPreviousError)
nmap ]b <Action>(NextTab)
nmap [b <Action>(PreviousTab)


